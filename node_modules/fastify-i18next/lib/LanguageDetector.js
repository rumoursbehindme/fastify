"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var utils = _interopRequireWildcard(require("./utils"));

var _cookie = _interopRequireDefault(require("./languageLookups/cookie"));

var _querystring = _interopRequireDefault(require("./languageLookups/querystring"));

var _path = _interopRequireDefault(require("./languageLookups/path"));

var _header = _interopRequireDefault(require("./languageLookups/header"));

var _session = _interopRequireDefault(require("./languageLookups/session"));

function getDefaults() {
  return {
    order: [
    /*'path', 'session' */
    'querystring', 'cookie', 'header'],
    lookupQuerystring: 'lng',
    lookupCookie: 'i18next',
    lookupSession: 'lng',
    lookupFromPathIndex: 0,
    // cache user language
    caches: false // ['cookie']
    //cookieExpirationDate: new Date(),
    //cookieDomain: 'myDomain'

  };
}

var LanguageDetector =
/*#__PURE__*/
function () {
  function LanguageDetector(services) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    (0, _classCallCheck2["default"])(this, LanguageDetector);
    this.type = 'languageDetector';
    this.detectors = {};
    this.init(services, options, allOptions);
  }

  (0, _createClass2["default"])(LanguageDetector, [{
    key: "init",
    value: function init(services) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var allOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      this.services = services;
      this.options = utils.defaults(options, this.options || {}, getDefaults());
      this.allOptions = allOptions;
      this.addDetector(_cookie["default"]);
      this.addDetector(_querystring["default"]);
      this.addDetector(_path["default"]);
      this.addDetector(_header["default"]);
      this.addDetector(_session["default"]);
    }
  }, {
    key: "addDetector",
    value: function addDetector(detector) {
      this.detectors[detector.name] = detector;
    }
  }, {
    key: "detect",
    value: function detect(req, res, detectionOrder) {
      var _this = this;

      if (arguments.length < 2) return;
      if (!detectionOrder) detectionOrder = this.options.order;
      var found;
      detectionOrder.forEach(function (detectorName) {
        if (found || !_this.detectors[detectorName]) return;

        var detections = _this.detectors[detectorName].lookup(req, res, _this.options);

        if (!detections) return;
        if (!Array.isArray(detections)) detections = [detections];
        detections.forEach(function (lng) {
          if (found || typeof lng !== 'string') return;

          var cleanedLng = _this.services.languageUtils.formatLanguageCode(lng);

          if (_this.services.languageUtils.isWhitelisted(cleanedLng)) {
            found = cleanedLng;
            req.i18nextLookupName = detectorName;
          }

          ;
        });
      });

      if (!found) {
        var fallbacks = this.allOptions.fallbackLng;
        if (typeof fallbacks === 'string') fallbacks = [fallbacks];
        if (!fallbacks) fallbacks = [];

        if (Object.prototype.toString.apply(fallbacks) === '[object Array]') {
          found = fallbacks[0];
        } else {
          found = fallbacks[0] || fallbacks["default"] && fallbacks["default"][0];
        }
      }

      ;
      return found;
    }
  }, {
    key: "cacheUserLanguage",
    value: function cacheUserLanguage(req, res, lng, caches) {
      var _this2 = this;

      if (arguments.length < 3) return;
      if (!caches) caches = this.options.caches;
      if (!caches) return;
      caches.forEach(function (cacheName) {
        if (_this2.detectors[cacheName] && _this2.detectors[cacheName].cacheUserLanguage) _this2.detectors[cacheName].cacheUserLanguage(req, res, lng, _this2.options);
      });
    }
  }]);
  return LanguageDetector;
}();

LanguageDetector.type = 'languageDetector';
var _default = LanguageDetector;
exports["default"] = _default;