"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getResourcesHandler = getResourcesHandler;
exports.missingKeyHandler = missingKeyHandler;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var utils = _interopRequireWildcard(require("./utils"));

var _LanguageDetector = _interopRequireDefault(require("./LanguageDetector"));

var _fastifyPlugin = _interopRequireDefault(require("fastify-plugin"));

function fastifyPlugin(instance, options, next) {
  var i18next = options.i18next;
  instance.addHook('preHandler',
  /*#__PURE__*/
  function () {
    var _ref = (0, _asyncToGenerator2["default"])(
    /*#__PURE__*/
    _regenerator["default"].mark(function _callee(request, reply, next) {
      var ignores, i, i18n, lng, t, exists;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof options.ignoreRoutes === 'function')) {
                _context.next = 5;
                break;
              }

              if (!options.ignoreRoutes(request, reply, options, i18next)) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return");

            case 3:
              _context.next = 13;
              break;

            case 5:
              ignores = options.ignoreRoutes instanceof Array && options.ignoreRoutes || [];
              i = 0;

            case 7:
              if (!(i < ignores.length)) {
                _context.next = 13;
                break;
              }

              if (!(request.path.indexOf(ignores[i]) > -1)) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return");

            case 10:
              i++;
              _context.next = 7;
              break;

            case 13:
              i18n = i18next.cloneInstance({
                initImmediate: false
              });
              i18n.on('languageChanged', function (lng) {
                // Keep language in sync
                request.language = request.locale = request.lng = lng;

                if (reply.locals) {
                  reply.locals.language = lng;
                  reply.locals.languageDir = i18next.dir(lng);
                }

                reply.header('Content-Language', lng);
                request.languages = i18next.services.languageUtils.toResolveHierarchy(lng);

                if (i18next.services.languageDetector) {
                  i18next.services.languageDetector.cacheUserLanguage(request, reply, lng);
                }
              });
              lng = request.lng;
              if (!request.lng && i18next.services.languageDetector) lng = i18next.services.languageDetector.detect(request, reply); // set locale

              request.language = request.locale = request.lng = lng;
              reply.header('Content-Language', lng);
              request.languages = i18next.services.languageUtils.toResolveHierarchy(lng); // trigger sync to instance - might trigger async load!

              i18n.changeLanguage(lng || i18next.options.fallbackLng[0]);

              if (request.i18nextLookupName === 'path' && options.removeLngFromUrl) {
                request.url = utils.removeLngFromUrl(request.url, i18next.services.languageDetector.options.lookupFromPathIndex);
              }

              t = i18n.t.bind(i18n);
              exists = i18n.exists.bind(i18n); // assert for request

              request.i18n = i18n;
              request.t = t; // assert for res -> template

              if (reply.locals) {
                reply.locals.t = t;
                reply.locals.exists = exists;
                reply.locals.i18n = i18n;
                reply.locals.language = lng;
                reply.locals.languageDir = i18next.dir(lng);
              }

              if (i18next.services.languageDetector) i18next.services.languageDetector.cacheUserLanguage(request, reply, lng); // load resources

              if (request.lng) {
                _context.next = 30;
                break;
              }

              return _context.abrupt("return");

            case 30:
              _context.next = 32;
              return i18next.loadLanguages(request.lng);

            case 32:
              return _context.abrupt("return");

            case 33:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }());
  return next();
}

function getResourcesHandler(i18next, options) {
  options = options || {};
  var maxAge = options.maxAge || 60 * 60 * 24 * 30;
  return function (req, res) {
    if (!i18next.services.backendConnector) return res.status(404).send('i18next-express-middleware:: no backend configured');
    var resources = {};
    res.contentType('json');

    if (options.cache !== undefined ? options.cache : process.env.NODE_ENV === 'production') {
      res.header('Cache-Control', 'public, max-age=' + maxAge);
      res.header('Expires', new Date(new Date().getTime() + maxAge * 1000).toUTCString());
    } else {
      res.header('Pragma', 'no-cache');
      res.header('Cache-Control', 'no-cache');
    }

    var languages = req.query[options.lngParam || 'lng'] ? req.query[options.lngParam || 'lng'].split(' ') : [];
    var namespaces = req.query[options.nsParam || 'ns'] ? req.query[options.nsParam || 'ns'].split(' ') : []; // extend ns

    namespaces.forEach(function (ns) {
      if (i18next.options.ns && i18next.options.ns.indexOf(ns) < 0) i18next.options.ns.push(ns);
    });
    i18next.services.backendConnector.load(languages, namespaces, function () {
      languages.forEach(function (lng) {
        namespaces.forEach(function (ns) {
          utils.setPath(resources, [lng, ns], i18next.getResourceBundle(lng, ns));
        });
      });
      res.send(resources);
    });
  };
}

;

function missingKeyHandler(i18next, options) {
  options = options || {};
  return function (req, res) {
    var lng = req.params[options.lngParam || 'lng'];
    var ns = req.params[options.nsParam || 'ns'];
    if (!i18next.services.backendConnector) return res.status(404).send('i18next-express-middleware:: no backend configured');

    for (var m in req.body) {
      i18next.services.backendConnector.saveMissing([lng], ns, m, req.body[m]);
    }

    res.send('ok');
  };
}

;
module.exports = {
  plugin: (0, _fastifyPlugin["default"])(fastifyPlugin, {
    fastify: '>=2.0.0',
    name: 'i18next-fastify-plugin'
  }),
  LanguageDetector: _LanguageDetector["default"] // getResourcesHandler,
  // missingKeyHandler

};