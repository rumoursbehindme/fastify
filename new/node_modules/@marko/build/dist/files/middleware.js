"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.routes = exports.assets = void 0;

var _path = _interopRequireDefault(require("path"));

const getRoute = global.GET_ROUTE;
const browserEnvs = global.BROWSER_ENVS;

const assets = process.env.NODE_ENV === "production" && require("connect-gzip-static")( // eslint-disable-next-line
_path.default.join(__non_webpack_require__.resolve("."), "..", "assets"), {
  setHeaders(res) {
    if (!res.getHeader("Cache-Control")) {
      res.setHeader("Cache-Control", ["public, max-age=31536000", "public, max-age=31536000, immutable"]);
      res.setHeader("Expires", new Date(Date.now() + 31536000000).toUTCString());
    }
  }

});

exports.assets = assets;

const routes = global.MARKO_MIDDLEWARE || ((req, res, notFound) => {
  res.setHeader("content-type", "text/html; charset=utf-8");
  const [pathname, query] = req.url.split("?");
  const route = getRoute(pathname);

  if (route) {
    if (route.redirect) {
      res.statusCode = 301;
      res.setHeader("location", route.path);
      res.end(`Redirecting to <a href=${JSON.stringify(route.path)}>${route.path}</a>`);
    } else {
      const userAgent = req.headers["user-agent"] || "";
      route.template.render({
        $global: {
          buildName: `Browser-${browserEnvs.find(({
            test
          }) => !test || test.test(userAgent)).env}`
        },
        params: route.params,
        query,
        pathname
      }, res);
    }
  } else {
    notFound();
  }
});

exports.routes = routes;