/// <reference types="node" />
import type { Readable } from "stream";
import type { FastifyPluginCallback } from "fastify";
declare type Locals = Record<string, unknown> & {
    serializedGlobals: Record<string, boolean>;
};
declare type MarkoInput = Record<string, unknown> & {
    $global?: Record<string, unknown> & {
        serializedGlobals?: Record<string, boolean>;
    };
};
declare type MarkoTemplate<I extends MarkoInput> = {
    stream(input: I): Readable;
    [x: string]: unknown;
};
declare module "fastify" {
    interface FastifyInstance {
        locals: Locals;
    }
    interface FastifyReply {
        locals: Locals;
        marko<I extends MarkoInput, T extends MarkoTemplate<I>>(template: T, input?: I): ReturnType<FastifyReply["send"]>;
    }
}
declare const _default: FastifyPluginCallback<never, import("http").Server>;
export default _default;
